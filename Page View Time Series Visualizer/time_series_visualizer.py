{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from pandas.plotting import register_matplotlib_converters\n",
    "register_matplotlib_converters()\n",
    "\n",
    "# Import data (Make sure to parse dates. Consider setting index column to 'date'.)\n",
    "df = pd.read_csv('fcc-forum-pageviews.csv', parse_dates=['date'], index_col='date')\n",
    "\n",
    "# Clean data\n",
    "df = df[\n",
    "    (df['value'] >= df['value'].quantile(0.025)) &\n",
    "    (df['value'] <= df['value'].quantile(0.975))\n",
    "]\n",
    "\n",
    "\n",
    "def draw_line_plot():\n",
    "    # Draw line plot\n",
    "    fig, ax = plt.subplots(figsize=(10, 5))\n",
    "    ax.plot(df.index, df['value'], 'r', linewidth=1)\n",
    "\n",
    "    ax.set_title('Daily freeCodeCamp Forum Page Views 5/2016-12/2019')\n",
    "    ax.set_xlabel('Date')\n",
    "    ax.set_ylabel('Page Views')\n",
    "\n",
    "    fig.savefig('line_plot.png')\n",
    "    return fig\n",
    "\n",
    "\n",
    "\n",
    "    # Save image and return fig (don't change this part)\n",
    "    fig.savefig('line_plot.png')\n",
    "    return fig\n",
    "\n",
    "def draw_bar_plot():\n",
    "    # Copy and modify data for monthly bar plot\n",
    "    df['month'] = df.index.month\n",
    "    df['year'] = df.index.year\n",
    "    df_bar = df.groupby(['year', 'month'])['value'].mean()\n",
    "    df_bar = df_bar.unstack()\n",
    "\n",
    "    # Draw bar plot\n",
    "    fig = df_bar.plot.bar(legend=True, figsize=(13, 6), ylabel=\"Average Page Views\", xlabel=\"Years\").figure\n",
    "    plt.legend(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\n",
    "\n",
    "    plt.xticks(fontsize=8)\n",
    "    plt.yticks(fontsize=8)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    # Save image and return fig (don't change this part)\n",
    "    fig.savefig('bar_plot.png')\n",
    "    return fig\n",
    "\n",
    "def draw_box_plot():\n",
    "    # Prepare data for box plots (this part is done!)\n",
    "    df_box = df.copy()\n",
    "    df_box.reset_index(inplace=True)\n",
    "    df_box['year'] = [d.year for d in df_box.date]\n",
    "    df_box['month'] = [d.strftime('%b') for d in df_box.date]\n",
    "\n",
    "    # Draw box plots (using Seaborn)\n",
    "\n",
    "    df_box['month_num'] = df_box['date'].dt.month\n",
    "    df_box = df_box.sort_values('month_num')\n",
    "\n",
    "    fig,axes = plt.subplots(nrows=1, ncols=2, figsize=(10,5))\n",
    "    axes[0] = sns.boxplot(x=df_box['year'], y=df_box['value'], ax=axes[0])\n",
    "    axes[1] = sns.boxplot(x=df_box['month'], y=df_box['value'], ax=axes[1])\n",
    "\n",
    "    axes[0].set.title = 'Year-wise Box Plot (Trend)'\n",
    "    axes[0].set.xlabel = 'Year'\n",
    "    axes[0].set.ylabel = 'Page Views'\n",
    "\n",
    "    axes[1].set.title = 'Month-wise Box Plot (Seasonality)'\n",
    "    axes[1].set.xlabel = 'Month'\n",
    "    axes[1].set.ylabel = 'Page Views'\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    # Save image and return fig (don't change this part)\n",
    "    fig.savefig('box_plot.png')\n",
    "    return fig\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
